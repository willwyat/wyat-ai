{
  "openapi": "3.1.0",
  "info": {
    "title": "backend",
    "description": "",
    "license": {
      "name": ""
    },
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "https://wyat-ai.onrender.com",
      "description": "Production server"
    }
  ],
  "paths": {
    "/capital/accounts": {
      "get": {
        "tags": ["capital"],
        "summary": "GET /capital/funds/:fund_id/positions - Compute positions for a specific fund",
        "description": "Positions are derived from capital_ledger transactions filtered by transaction-level `fund_id`.\nFor v1, this endpoint returns net quantities per asset (fiat currencies and crypto assets).\nValuation and pricing are intentionally omitted for now.\nGET /capital/accounts - Fetch all accounts from MongoDB",
        "operationId": "get_all_accounts",
        "responses": {
          "200": {
            "description": "List of all accounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/capital/envelopes": {
      "get": {
        "tags": ["capital"],
        "summary": "GET /capital/envelopes - Fetch all envelopes from MongoDB",
        "operationId": "get_all_envelopes",
        "responses": {
          "200": {
            "description": "List of all envelopes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Envelope"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/capital/funds": {
      "get": {
        "tags": ["capital"],
        "summary": "GET /capital/funds - Fetch all funds from MongoDB (capital_funds collection)",
        "operationId": "get_all_funds",
        "responses": {
          "200": {
            "description": "List of all funds",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PublicFund"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/capital/funds/{fund_id}/positions": {
      "get": {
        "tags": ["capital"],
        "summary": "GET /capital/funds/:fund_id/positions - Aggregate fund positions from capital_ledger",
        "operationId": "get_fund_positions",
        "parameters": [
          {
            "name": "fund_id",
            "in": "path",
            "description": "Fund ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Fund positions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Position"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/capital/transactions": {
      "get": {
        "tags": ["capital"],
        "operationId": "get_transactions",
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "description": "Filter by account ID",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "envelope_id",
            "in": "query",
            "description": "Filter by envelope/category ID",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "label",
            "in": "query",
            "description": "Filter by cycle label (e.g., '2025-10')",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Unix timestamp for start of time range",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Unix timestamp for end of time range",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          },
          {
            "name": "tx_type",
            "in": "query",
            "description": "Filter by transaction type",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of transactions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/workout/exercise-entries": {
      "get": {
        "tags": ["workout"],
        "operationId": "get_all_exercise_entries_mongo",
        "responses": {
          "200": {
            "description": "List of all exercise entries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExerciseEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "post": {
        "tags": ["workout"],
        "operationId": "create_exercise_entry_mongo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExerciseEntryInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Exercise entry created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExerciseEntry"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Exercise type not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      }
    },
    "/workout/exercise-entries/day/{date_unix}": {
      "get": {
        "tags": ["workout"],
        "operationId": "get_exercise_entries_by_day",
        "parameters": [
          {
            "name": "date_unix",
            "in": "path",
            "description": "Unix timestamp (any time on the target day)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "tz",
            "in": "query",
            "description": "IANA timezone, e.g. 'America/New_York'. Defaults to UTC.",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Exercise entries for the day",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExerciseEntry"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid timestamp or timezone"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      }
    },
    "/workout/exercise-entries/{id}": {
      "patch": {
        "tags": ["workout"],
        "operationId": "update_exercise_entry_mongo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Exercise entry ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExerciseEntryPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Exercise entry updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExerciseEntry"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Exercise entry not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      }
    },
    "/workout/exercise-types": {
      "get": {
        "tags": ["workout"],
        "operationId": "get_all_exercise_types_mongo",
        "responses": {
          "200": {
            "description": "List of all exercise types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExerciseType"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "post": {
        "tags": ["workout"],
        "operationId": "create_exercise_type_mongo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExerciseTypeInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Exercise type created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExerciseType"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      }
    },
    "/workout/exercise-types/find-by-muscle": {
      "post": {
        "tags": ["workout"],
        "operationId": "find_exercise_type_by_muscle",
        "requestBody": {
          "description": "List of muscle names to filter by",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FindByMuscleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Exercise types matching muscles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExerciseType"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      }
    },
    "/workout/exercise-types/{id}": {
      "patch": {
        "tags": ["workout"],
        "operationId": "update_exercise_type_mongo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Exercise type ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExerciseTypePatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Exercise type updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExerciseType"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Exercise type not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Account": {
        "type": "object",
        "required": ["id", "name", "currency", "metadata"],
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "id": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/AccountMetadata"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "AccountMetadata": {
        "oneOf": [
          {
            "type": "object",
            "required": ["type", "data"],
            "properties": {
              "data": {
                "type": "object",
                "required": ["bank_name", "owner_name", "account_number"],
                "properties": {
                  "account_number": {
                    "type": "string"
                  },
                  "bank_name": {
                    "type": "string"
                  },
                  "color": {
                    "type": "string",
                    "nullable": true
                  },
                  "owner_name": {
                    "type": "string"
                  },
                  "routing_number": {
                    "type": "string",
                    "nullable": true
                  },
                  "txid_prefix": {
                    "type": "string",
                    "nullable": true
                  }
                }
              },
              "type": {
                "type": "string",
                "enum": ["Checking"]
              }
            }
          },
          {
            "type": "object",
            "required": ["type", "data"],
            "properties": {
              "data": {
                "type": "object",
                "required": ["bank_name", "owner_name", "account_number"],
                "properties": {
                  "account_number": {
                    "type": "string"
                  },
                  "bank_name": {
                    "type": "string"
                  },
                  "color": {
                    "type": "string",
                    "nullable": true
                  },
                  "owner_name": {
                    "type": "string"
                  },
                  "routing_number": {
                    "type": "string",
                    "nullable": true
                  },
                  "txid_prefix": {
                    "type": "string",
                    "nullable": true
                  }
                }
              },
              "type": {
                "type": "string",
                "enum": ["Savings"]
              }
            }
          },
          {
            "type": "object",
            "required": ["type", "data"],
            "properties": {
              "data": {
                "type": "object",
                "required": [
                  "credit_card_name",
                  "owner_name",
                  "account_number"
                ],
                "properties": {
                  "account_number": {
                    "type": "string"
                  },
                  "color": {
                    "type": "string",
                    "nullable": true
                  },
                  "credit_card_name": {
                    "type": "string"
                  },
                  "owner_name": {
                    "type": "string"
                  },
                  "routing_number": {
                    "type": "string",
                    "nullable": true
                  },
                  "txid_prefix": {
                    "type": "string",
                    "nullable": true
                  }
                }
              },
              "type": {
                "type": "string",
                "enum": ["Credit"]
              }
            }
          },
          {
            "type": "object",
            "required": ["type", "data"],
            "properties": {
              "data": {
                "type": "object",
                "required": ["address", "network", "is_ledger"],
                "properties": {
                  "address": {
                    "type": "string"
                  },
                  "color": {
                    "type": "string",
                    "nullable": true
                  },
                  "is_ledger": {
                    "type": "boolean"
                  },
                  "network": {
                    "$ref": "#/components/schemas/AccountNetwork"
                  },
                  "txid_prefix": {
                    "type": "string",
                    "nullable": true
                  }
                }
              },
              "type": {
                "type": "string",
                "enum": ["CryptoWallet"]
              }
            }
          },
          {
            "type": "object",
            "required": ["type", "data"],
            "properties": {
              "data": {
                "type": "object",
                "required": ["cex_name", "account_id"],
                "properties": {
                  "account_id": {
                    "type": "string"
                  },
                  "cex_name": {
                    "type": "string"
                  },
                  "color": {
                    "type": "string",
                    "nullable": true
                  },
                  "txid_prefix": {
                    "type": "string",
                    "nullable": true
                  }
                }
              },
              "type": {
                "type": "string",
                "enum": ["Cex"]
              }
            }
          },
          {
            "type": "object",
            "required": ["type", "data"],
            "properties": {
              "data": {
                "type": "object",
                "required": ["trustee", "jurisdiction"],
                "properties": {
                  "color": {
                    "type": "string",
                    "nullable": true
                  },
                  "jurisdiction": {
                    "type": "string"
                  },
                  "trustee": {
                    "type": "string"
                  },
                  "txid_prefix": {
                    "type": "string",
                    "nullable": true
                  }
                }
              },
              "type": {
                "type": "string",
                "enum": ["Trust"]
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "AccountNetwork": {
        "oneOf": [
          {
            "type": "object",
            "required": ["EVM"],
            "properties": {
              "EVM": {
                "type": "object",
                "required": ["chain_name", "chain_id"],
                "properties": {
                  "chain_id": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "chain_name": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "type": "string",
            "enum": ["Solana"]
          },
          {
            "type": "string",
            "enum": ["Bitcoin"]
          }
        ]
      },
      "BalanceState": {
        "type": "string",
        "enum": [
          "balanced",
          "needs_envelope_offset",
          "awaiting_transfer_match",
          "unknown"
        ]
      },
      "Currency": {
        "type": "string",
        "enum": ["USD", "HKD", "BTC"]
      },
      "DeficitPolicy": {
        "type": "string",
        "enum": ["AutoNet", "RequireTransfer"]
      },
      "Envelope": {
        "type": "object",
        "required": [
          "id",
          "name",
          "kind",
          "status",
          "rollover",
          "balance",
          "allow_negative"
        ],
        "properties": {
          "allow_negative": {
            "type": "boolean",
            "description": "Allow controlled negative balances (deficits)."
          },
          "balance": {
            "$ref": "#/components/schemas/Money"
          },
          "deficit_policy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeficitPolicy"
              }
            ],
            "nullable": true
          },
          "funding": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FundingRule"
              }
            ],
            "nullable": true
          },
          "id": {
            "type": "string"
          },
          "kind": {
            "$ref": "#/components/schemas/EnvelopeKind"
          },
          "last_period": {
            "type": "string",
            "description": "Last processed period in \"YYYY-MM\".",
            "nullable": true
          },
          "min_balance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Decimal"
              }
            ],
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "period_limit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Money"
              }
            ],
            "nullable": true
          },
          "rollover": {
            "$ref": "#/components/schemas/RolloverPolicy"
          },
          "status": {
            "$ref": "#/components/schemas/EnvelopeStatus"
          }
        }
      },
      "EnvelopeKind": {
        "type": "string",
        "enum": ["Fixed", "Variable"]
      },
      "EnvelopeStatus": {
        "type": "string",
        "enum": ["Active", "Inactive"]
      },
      "EnvelopeUsage": {
        "type": "object",
        "required": [
          "envelope_id",
          "label",
          "budget",
          "spent",
          "remaining",
          "percent"
        ],
        "properties": {
          "budget": {
            "$ref": "#/components/schemas/Money"
          },
          "envelope_id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "percent": {
            "type": "number",
            "format": "double"
          },
          "remaining": {
            "$ref": "#/components/schemas/Money"
          },
          "spent": {
            "$ref": "#/components/schemas/Money"
          }
        }
      },
      "ExerciseEntry": {
        "type": "object",
        "required": ["exercise_label", "date_unix"],
        "properties": {
          "_id": {
            "type": "string",
            "nullable": true
          },
          "date_unix": {
            "type": "integer",
            "format": "int64"
          },
          "distance_meters": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "minimum": 0
          },
          "exercise_id": {
            "type": "string",
            "nullable": true
          },
          "exercise_label": {
            "type": "string"
          },
          "intensity": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "minimum": 0
          },
          "load_basis": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LoadBasis"
              }
            ],
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "reps": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "minimum": 0
          },
          "sets": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "minimum": 0
          },
          "time_seconds": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "minimum": 0
          },
          "tz": {
            "type": "string",
            "nullable": true
          },
          "weight_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WeightUnit"
              }
            ],
            "nullable": true
          },
          "weight_value": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        }
      },
      "ExerciseEntryInput": {
        "type": "object",
        "required": ["exercise_id", "date_unix"],
        "properties": {
          "date_unix": {
            "type": "integer",
            "format": "int64"
          },
          "distance_meters": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "minimum": 0
          },
          "exercise_id": {
            "type": "string"
          },
          "intensity": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "minimum": 0
          },
          "load_basis": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LoadBasis"
              }
            ],
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "reps": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "minimum": 0
          },
          "sets": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "minimum": 0
          },
          "time_seconds": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "minimum": 0
          },
          "tz": {
            "type": "string",
            "nullable": true
          },
          "weight_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WeightUnit"
              }
            ],
            "nullable": true
          },
          "weight_value": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        }
      },
      "ExerciseEntryPatch": {
        "type": "object",
        "properties": {
          "date_unix": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "distance_meters": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "minimum": 0
          },
          "exercise_id": {
            "type": "string",
            "nullable": true
          },
          "intensity": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "minimum": 0
          },
          "load_basis": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LoadBasis"
              }
            ],
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "reps": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "minimum": 0
          },
          "sets": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "minimum": 0
          },
          "time_seconds": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "minimum": 0
          },
          "tz": {
            "type": "string",
            "nullable": true
          },
          "weight_unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WeightUnit"
              }
            ],
            "nullable": true
          },
          "weight_value": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        }
      },
      "ExerciseType": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "_id": {
            "type": "string",
            "nullable": true
          },
          "aliases": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "default_load_basis": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LoadBasis"
              }
            ],
            "nullable": true
          },
          "guidance": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "primary_muscles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Muscle"
            }
          }
        }
      },
      "ExerciseTypeInput": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "aliases": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "default_load_basis": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LoadBasis"
              }
            ],
            "nullable": true
          },
          "guidance": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "primary_muscles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Muscle"
            }
          }
        }
      },
      "ExerciseTypePatch": {
        "type": "object",
        "properties": {
          "aliases": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "default_load_basis": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LoadBasis"
              }
            ],
            "nullable": true
          },
          "guidance": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "primary_muscles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Muscle"
            },
            "nullable": true
          }
        }
      },
      "FindByMuscleRequest": {
        "type": "object",
        "required": ["muscles"],
        "properties": {
          "muscles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FundingFreq": {
        "type": "string",
        "enum": ["Monthly"]
      },
      "FundingRule": {
        "type": "object",
        "required": ["amount", "freq"],
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/Money"
          },
          "freq": {
            "$ref": "#/components/schemas/FundingFreq"
          }
        }
      },
      "FxSnapshot": {
        "type": "object",
        "description": "Snapshot used to value a leg in a chosen reporting currency (e.g., USD or BTC).",
        "required": ["to", "rate"],
        "properties": {
          "rate": {
            "$ref": "#/components/schemas/Decimal"
          },
          "to": {
            "$ref": "#/components/schemas/Currency"
          }
        }
      },
      "Leg": {
        "type": "object",
        "required": ["account_id", "direction", "amount"],
        "properties": {
          "account_id": {
            "type": "string"
          },
          "amount": {
            "$ref": "#/components/schemas/LegAmount"
          },
          "category_id": {
            "type": "string",
            "nullable": true
          },
          "direction": {
            "$ref": "#/components/schemas/LegDirection"
          },
          "fee_of_leg_idx": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "minimum": 0
          },
          "fx": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FxSnapshot"
              }
            ],
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "LegAmount": {
        "oneOf": [
          {
            "type": "object",
            "required": ["kind", "data"],
            "properties": {
              "data": {
                "$ref": "#/components/schemas/Money"
              },
              "kind": {
                "type": "string",
                "enum": ["Fiat"]
              }
            }
          },
          {
            "type": "object",
            "required": ["kind", "data"],
            "properties": {
              "data": {
                "type": "object",
                "description": "Crypto asset with symbol and quantity (e.g., { asset: \"ETH\", qty: 1.25 })",
                "required": ["asset", "qty"],
                "properties": {
                  "asset": {
                    "type": "string"
                  },
                  "qty": {
                    "$ref": "#/components/schemas/Decimal"
                  }
                }
              },
              "kind": {
                "type": "string",
                "enum": ["Crypto"]
              }
            }
          }
        ],
        "description": "Amount carried by a leg: either fiat (Money) or a crypto asset quantity.",
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "LegDirection": {
        "type": "string",
        "enum": ["Debit", "Credit"]
      },
      "LoadBasis": {
        "type": "string",
        "enum": ["per_side", "total"]
      },
      "Money": {
        "type": "object",
        "required": ["amount", "ccy"],
        "properties": {
          "amount": {
            "type": "string"
          },
          "ccy": {
            "$ref": "#/components/schemas/Currency"
          }
        }
      },
      "Muscle": {
        "type": "string",
        "enum": [
          "chest",
          "back",
          "shoulders",
          "biceps",
          "triceps",
          "forearms",
          "glutes",
          "quads",
          "hamstrings",
          "calves",
          "abdominals",
          "spinal_erectors",
          "obliques"
        ]
      },
      "Position": {
        "type": "object",
        "required": [
          "fund_id",
          "asset",
          "qty",
          "price_in_base_ccy",
          "last_updated"
        ],
        "properties": {
          "asset": {
            "type": "string"
          },
          "fund_id": {
            "type": "string"
          },
          "last_updated": {
            "type": "integer",
            "format": "int64"
          },
          "price_in_base_ccy": {
            "$ref": "#/components/schemas/Decimal"
          },
          "qty": {
            "$ref": "#/components/schemas/Decimal"
          }
        }
      },
      "PublicFund": {
        "type": "object",
        "required": [
          "id",
          "fund_id",
          "name",
          "symbol",
          "assets",
          "purpose",
          "horizon_years",
          "discretionary_sales",
          "denominated_in",
          "max_pct_networth",
          "max_pct_liquid",
          "liquid",
          "review_cadence",
          "status",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "acquisition_policy": {
            "type": "string",
            "nullable": true
          },
          "assets": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "balancing_policy": {
            "type": "object",
            "nullable": true
          },
          "created_at": {
            "type": "integer",
            "format": "int64"
          },
          "denominated_in": {
            "$ref": "#/components/schemas/Currency"
          },
          "discretionary_sales": {
            "type": "boolean"
          },
          "fund_id": {
            "type": "string"
          },
          "horizon_years": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "string"
          },
          "liquid": {
            "type": "boolean"
          },
          "max_pct_liquid": {
            "type": "number",
            "format": "double"
          },
          "max_pct_networth": {
            "type": "number",
            "format": "double"
          },
          "multiplier_rules": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "purpose": {
            "type": "string"
          },
          "review_cadence": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "updated_at": {
            "type": "integer",
            "format": "int64"
          },
          "yield_policy": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Region": {
        "type": "string",
        "enum": ["upper_body", "lower_body", "core"]
      },
      "RolloverPolicy": {
        "oneOf": [
          {
            "type": "string",
            "description": "On new month: if balance is positive -> reset to 0; if negative and deficits allowed -> carry the negative.",
            "enum": ["ResetToZero"]
          },
          {
            "type": "object",
            "required": ["CarryOver"],
            "properties": {
              "CarryOver": {
                "type": "object",
                "description": "Keep remaining balance; add funding; optionally cap final balance.",
                "properties": {
                  "cap": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Money"
                      }
                    ],
                    "nullable": true
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": ["SinkingFund"],
            "properties": {
              "SinkingFund": {
                "type": "object",
                "description": "Classic sinking fund: always carry over; cap optional.",
                "properties": {
                  "cap": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Money"
                      }
                    ],
                    "nullable": true
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": ["Decay"],
            "properties": {
              "Decay": {
                "type": "object",
                "description": "Carry over but apply exponential decay to prior balance before funding.",
                "required": ["keep_ratio"],
                "properties": {
                  "cap": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Money"
                      }
                    ],
                    "nullable": true
                  },
                  "keep_ratio": {
                    "$ref": "#/components/schemas/Decimal"
                  }
                }
              }
            }
          }
        ]
      },
      "Transaction": {
        "type": "object",
        "required": [
          "id",
          "ts",
          "source",
          "reconciled",
          "external_refs",
          "legs"
        ],
        "properties": {
          "balance_state": {
            "$ref": "#/components/schemas/BalanceState"
          },
          "external_refs": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            }
          },
          "id": {
            "type": "string"
          },
          "legs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Leg"
            }
          },
          "memo": {
            "type": "string",
            "nullable": true
          },
          "payee": {
            "type": "string",
            "nullable": true
          },
          "posted_ts": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "reconciled": {
            "type": "boolean"
          },
          "source": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "ts": {
            "type": "integer",
            "format": "int64"
          },
          "tx_type": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "WeightUnit": {
        "type": "string",
        "enum": ["kg", "lb"]
      }
    },
    "securitySchemes": {
      "ApiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "x-wyat-api-key"
      }
    }
  },
  "tags": [
    {
      "name": "workout",
      "description": "Workout tracking endpoints"
    },
    {
      "name": "capital",
      "description": "Capital management endpoints"
    }
  ]
}
