{
  "openapi": "3.1.0",
  "info": {
    "title": "Wyat AI Journal API",
    "version": "1.0.0",
    "description": "Who Dares Wins"
  },
  "servers": [
    {
      "url": "https://wyat-ai.onrender.com"
    }
  ],
  "paths": {
    "/journal/mongo": {
      "post": {
        "summary": "Create a new journal entry",
        "description": "Creates a completely new journal entry with title, text content, and date. Use this endpoint for new entries only.",
        "operationId": "createJournalEntry",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewJournalEntry"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Journal entry created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: missing or invalid API key"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/journal/mongo/all": {
      "get": {
        "summary": "Get all journal entries",
        "operationId": "getAllJournalEntries",
        "responses": {
          "200": {
            "description": "List of journal entries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JournalEntry"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: missing or invalid API key"
          }
        }
      }
    },
    "/journal/mongo/{id}": {
      "get": {
        "summary": "Get a journal entry by ID",
        "operationId": "getJournalEntryById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the journal entry",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Journal entry details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JournalEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID format"
          },
          "401": {
            "description": "Unauthorized: missing or invalid API key"
          },
          "404": {
            "description": "Entry not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Edit a journal entry (creates new version)",
        "description": "Updates an existing journal entry by creating a new version. Only the text content can be modified - title and date remain unchanged. This endpoint creates a new version in the versions array.",
        "operationId": "editJournalEntry",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the journal entry",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditJournalEntry"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Journal entry updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JournalResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID format"
          },
          "401": {
            "description": "Unauthorized: missing or invalid API key"
          },
          "404": {
            "description": "Entry not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Delete a journal entry",
        "operationId": "deleteJournalEntry",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the journal entry",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Journal entry deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JournalResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID format"
          },
          "401": {
            "description": "Unauthorized: missing or invalid API key"
          },
          "404": {
            "description": "Entry not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "NewJournalEntry": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the journal entry"
          },
          "text": {
            "type": "string",
            "description": "Content of the journal entry"
          },
          "date_unix": {
            "type": "integer",
            "description": "Unix timestamp for the entry date"
          }
        },
        "required": ["title", "text", "date_unix"]
      },
      "EditJournalEntry": {
        "type": "object",
        "description": "Payload for editing an existing journal entry. Only the text content can be modified.",
        "properties": {
          "text": {
            "type": "string",
            "description": "New content for the journal entry. This will create a new version while preserving the original title and date."
          }
        },
        "required": ["text"]
      },
      "JournalVersion": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Content of this version"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "When this version was created"
          }
        },
        "required": ["text", "timestamp"]
      },
      "JournalEntry": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "MongoDB ObjectId of the entry"
          },
          "title": {
            "type": "string",
            "description": "Title of the journal entry"
          },
          "date_unix": {
            "type": "integer",
            "description": "Unix timestamp for the entry date"
          },
          "versions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JournalVersion"
            },
            "description": "Array of all versions of this entry"
          },
          "preview_text": {
            "type": "string",
            "description": "First 100 characters of the latest version for preview"
          }
        },
        "required": ["_id", "title", "date_unix", "versions", "preview_text"]
      },
      "JournalResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Response message"
          }
        },
        "required": ["message"]
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-wyat-api-key"
      }
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ]
}
